<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angular on juri.dev</title>
    <link>https://juristr.com/tags/angular/</link>
    <description>Recent content in Angular on juri.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Juri Strumpflohner - All rights reserved</copyright>
    <lastBuildDate>Fri, 08 Jan 2021 10:00:00 +0100</lastBuildDate>
    
	<atom:link href="https://juristr.com/tags/angular/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automatic Multi-Step Code Migrations with Nx</title>
      <link>https://juristr.com/blog/2020/11/multi-step-automatic-code-migrations/</link>
      <pubDate>Fri, 08 Jan 2021 10:00:00 +0100</pubDate>
      
      <guid>https://juristr.com/blog/2020/11/multi-step-automatic-code-migrations/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    Apart from the framework itself, one outcome from Google&amp;rsquo;s Angular team is for sure the tooling. One important tooling feature is the ability to automatically upgrade Angular codebases across breaking changes. Let&amp;rsquo;s see how that works and why it is important.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>I&#39;m new to Nx. Where do I get started?</title>
      <link>https://juristr.com/blog/2020/11/get-started-with-nx/</link>
      <pubDate>Wed, 11 Nov 2020 20:49:05 +0100</pubDate>
      
      <guid>https://juristr.com/blog/2020/11/get-started-with-nx/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    If you are new to &lt;a href=&#34;https://nx.dev&#34;&gt;Nx&lt;/a&gt;, but curious, here are a couple of pointers and links where and how to get started.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Using the Nx Dependency Graph in Custom Scripts</title>
      <link>https://juristr.com/blog/2020/09/use-nx-dep-graph-in-custom-scripts/</link>
      <pubDate>Wed, 30 Sep 2020 11:09:52 +0200</pubDate>
      
      <guid>https://juristr.com/blog/2020/09/use-nx-dep-graph-in-custom-scripts/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    One of the powerful pillars of the open-source &lt;a href=&#34;https://nx.dev&#34;&gt;Nx monorepo toolkit&lt;/a&gt; is its dependency graph. In this article, we&amp;rsquo;re going to look into how we can leverage it in our own scripts.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Access Angular Material&#39;s MatSelect Options Panel Container</title>
      <link>https://juristr.com/blog/2020/06/access-material-select-options/</link>
      <pubDate>Sat, 12 Sep 2020 10:47:22 +0200</pubDate>
      
      <guid>https://juristr.com/blog/2020/06/access-material-select-options/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    In this article we&amp;rsquo;re going to explore how you can programmatically access the Angular Material Select panel, without doing strange global DOM queries . Let&amp;rsquo;s dive in!
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AskJuri: Learning about Angular Elements</title>
      <link>https://juristr.com/blog/2020/06/askjuri-learning-angular-elements/</link>
      <pubDate>Fri, 03 Jul 2020 17:13:18 +0200</pubDate>
      
      <guid>https://juristr.com/blog/2020/06/askjuri-learning-angular-elements/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    About questions I&amp;rsquo;m getting asked online, on Twitter, in person&amp;hellip;wherever and which I find useful to share with the general public
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Create Nx Libs with Assets</title>
      <link>https://juristr.com/blog/2020/05/nx-libs-with-assets/</link>
      <pubDate>Thu, 21 May 2020 00:01:04 +0200</pubDate>
      
      <guid>https://juristr.com/blog/2020/05/nx-libs-with-assets/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    One of the core pieces of &lt;a href=&#34;https://nx.dev&#34;&gt;Nx&lt;/a&gt; are libraries. They enable to seamlessly share functionality across various apps and other libs within the monorepository. Exporting code is easy, but how can we export things like assets?
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Debug Jest with VSCode</title>
      <link>https://juristr.com/blog/2020/05/vscode-debug-jest/</link>
      <pubDate>Thu, 14 May 2020 14:54:27 +0200</pubDate>
      
      <guid>https://juristr.com/blog/2020/05/vscode-debug-jest/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    Jest has become the goto testing framework in the frontend space, whether it is for React or for Angular. In Nx it is even the default choice when generating a new Angular app. Debugging can be a bit more cumbersome though, in contrast to Karma. Let&amp;rsquo;s see.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Talk: Lazy Loading on Steroids with Angular Elements</title>
      <link>https://juristr.com/blog/2019/12/jsbe-lazy-loading-ngelements/</link>
      <pubDate>Tue, 17 Dec 2019 08:48:08 +0100</pubDate>
      
      <guid>https://juristr.com/blog/2019/12/jsbe-lazy-loading-ngelements/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    Last week I was invited to &lt;a href=&#34;https://jsbe.io&#34;&gt;jsbe.io&lt;/a&gt;, a JS meetup in Bruxelles (Belgium) to talk about lazy loading in Angular in combination with Angular Elements. Here is the recording and slides of my talk.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Talk: Enterprise Grade Angular Reactive Forms</title>
      <link>https://juristr.com/blog/2019/12/ng-be-2019-formly-talks/</link>
      <pubDate>Sat, 07 Dec 2019 08:48:08 +0100</pubDate>
      
      <guid>https://juristr.com/blog/2019/12/ng-be-2019-formly-talks/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    This year I again had the pleasure to come back to &lt;a href=&#34;https://ng-be.org/&#34;&gt;ng-be&lt;/a&gt; as a speaker. Since I see a lot of people struggle with creating proper forms, especially large forms, I gave a talk about how to optimize your Angular Reactive Forms with the help of &lt;a href=&#34;https://formly.dev/&#34;&gt;ngx-formly&lt;/a&gt;.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Lazy Loading with Angular Elements and ngx-lazy-el</title>
      <link>https://juristr.com/blog/2019/11/lazy-loading-angular-ngx-lazy-el/</link>
      <pubDate>Wed, 06 Nov 2019 12:00:28 +0100</pubDate>
      
      <guid>https://juristr.com/blog/2019/11/lazy-loading-angular-ngx-lazy-el/</guid>
      <description>Modern web apps often suffer of bad startup time. This frustrates your users. Even worse (especially for public facing apps), it might even result in being penalized on the Google search index.</description>
    </item>
    
    <item>
      <title>Manually Lazy Load an Angular Module with ViewEngine and Ivy</title>
      <link>https://juristr.com/blog/2019/10/lazyload-module-ivy-viewengine/</link>
      <pubDate>Tue, 01 Oct 2019 00:09:59 +0200</pubDate>
      
      <guid>https://juristr.com/blog/2019/10/lazyload-module-ivy-viewengine/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    I have written about &lt;a href=&#34;https://juristr.com/blog/2019/04/state-lazy-loading-components-angular/#manual-lazy-loading-of-modules&#34;&gt;lazy loading components&lt;/a&gt; in the past, that covers some of the topics mentioned here as well. Today in this post I&amp;rsquo;d like to exclusively focus on how to approach lazy loading of an Angular Module in a way that is compatible with ViewEngine and Ivy.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Debugging Angular Ivy Applications from the Devtools Console</title>
      <link>https://juristr.com/blog/2019/09/debugging-angular-ivy-console/</link>
      <pubDate>Wed, 25 Sep 2019 22:44:36 +0200</pubDate>
      
      <guid>https://juristr.com/blog/2019/09/debugging-angular-ivy-console/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    Do you remember how in AngularJS (v1.x) we could easily debug/change the state of our components from the browser&amp;rsquo;s devtools. Guess what: now with Ivy a new easy API returns that openes up a variety of new ways. Let&amp;rsquo;s see how that works.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Angular Performance: Precaching with the Service Worker</title>
      <link>https://juristr.com/blog/2019/08/ngperf-precaching-serviceworker/</link>
      <pubDate>Sat, 31 Aug 2019 12:45:59 +0200</pubDate>
      
      <guid>https://juristr.com/blog/2019/08/ngperf-precaching-serviceworker/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    This article is part of my &amp;ldquo;Angular Performance Week&amp;rdquo; series, where I publish a new video each day based on the performance articles on web.dev/angular. Today we&amp;rsquo;re diving into the service worker API, in specific by leveraging Angular&amp;rsquo;s integrated service worker package.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Angular Performance: Virtual Scrolling with the CDK</title>
      <link>https://juristr.com/blog/2019/08/ngperf-virtual-scrolling-cdk/</link>
      <pubDate>Fri, 30 Aug 2019 12:45:59 +0200</pubDate>
      
      <guid>https://juristr.com/blog/2019/08/ngperf-virtual-scrolling-cdk/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    This article is part of my &amp;ldquo;Angular Performance Week&amp;rdquo; series, where I publish a new video each day based on the performance articles on web.dev/angular.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Angular Performance: Optimize Angular Change Detection</title>
      <link>https://juristr.com/blog/2019/08/ngperf-optimize-change-detection/</link>
      <pubDate>Thu, 29 Aug 2019 12:45:59 +0200</pubDate>
      
      <guid>https://juristr.com/blog/2019/08/ngperf-optimize-change-detection/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    This article is part of my &amp;ldquo;Angular Performance Week&amp;rdquo; series, where I publish a new video each day based on the performance articles on web.dev/angular. Angular is fast, but we can make it even faster. One way is by tuning its change detection system. Let&amp;rsquo;s see how.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Angular Performance: Performance budgets with the Angular CLI</title>
      <link>https://juristr.com/blog/2019/08/ngperf-setting-performance-budgets/</link>
      <pubDate>Wed, 28 Aug 2019 12:45:59 +0200</pubDate>
      
      <guid>https://juristr.com/blog/2019/08/ngperf-setting-performance-budgets/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    This article is part of my &amp;ldquo;Angular Performance Week&amp;rdquo; series, where I publish a new video each day based on the performance articles on web.dev/angular. This article focuses on how we can define performance budgets with the Angular CLI.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Angular Performance: Preloading Lazy Routes</title>
      <link>https://juristr.com/blog/2019/08/ngperf-preloading-lazy-routes/</link>
      <pubDate>Tue, 27 Aug 2019 12:45:59 +0200</pubDate>
      
      <guid>https://juristr.com/blog/2019/08/ngperf-preloading-lazy-routes/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    This article is part of my &amp;ldquo;Angular Performance Week&amp;rdquo; series, where I publish a new video each day based on the performance articles on web.dev/angular. Today we&amp;rsquo;re going to have a look at various ways to preload lazy routes in Angular: preloading all modules, custom preloading and with &lt;a href=&#34;https://github.com/mgechev/ngx-quicklink&#34;&gt;ngx-quicklink&lt;/a&gt;.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Angular Performance: Route Level Code Splitting</title>
      <link>https://juristr.com/blog/2019/08/ngperf-route-level-code-splitting/</link>
      <pubDate>Mon, 26 Aug 2019 12:45:59 +0200</pubDate>
      
      <guid>https://juristr.com/blog/2019/08/ngperf-route-level-code-splitting/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    This article is part of my &amp;ldquo;Angular Performance Week&amp;rdquo; series, where I publish a new video each day based on the performance articles on web.dev/angular. Today we&amp;rsquo;re taking a look at route-level code splitting to increase the TTI of our application.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Dynamically Load CSS with the Angular CLI</title>
      <link>https://juristr.com/blog/2019/08/dynamically-load-css-angular-cli/</link>
      <pubDate>Thu, 22 Aug 2019 12:42:15 +0200</pubDate>
      
      <guid>https://juristr.com/blog/2019/08/dynamically-load-css-angular-cli/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    I’ve written about &lt;a href=&#34;https://juristr.com/blog/2019/04/state-lazy-loading-components-angular/&#34;&gt;lazy loading&lt;/a&gt; in the past, as well as how to &lt;a href=&#34;https://juristr.com/blog/2016/01/learning-ng2-dynamic-styles&#34;&gt;handle various styling issues in Angular&lt;/a&gt;. This time we’ll explore how to customize the Angular CLI s.t. we can lazy load CSS files on the fly.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>It’s time to say thank you to the Angular CLI Team!</title>
      <link>https://juristr.com/blog/2019/08/thank-you-angular-cli-team/</link>
      <pubDate>Tue, 13 Aug 2019 11:37:24 +0200</pubDate>
      
      <guid>https://juristr.com/blog/2019/08/thank-you-angular-cli-team/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    Nowadays, you can &lt;strong&gt;create&lt;/strong&gt;, and &lt;strong&gt;run a new Angular project&lt;/strong&gt; in minutes (!! 🔥). It really just depends how fast your internet is to download all the &lt;code&gt;node_modules&lt;/code&gt;. This wasn’t always the case in the Angular community but many forgot about it!
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Update to Angular Version 8 now!</title>
      <link>https://juristr.com/blog/2019/06/angular-v8/</link>
      <pubDate>Mon, 03 Jun 2019 12:00:00 +0200</pubDate>
      
      <guid>https://juristr.com/blog/2019/06/angular-v8/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    Let&amp;rsquo;s dive into the latest Angular version 8 that just got released. We&amp;rsquo;ll quickly explore what&amp;rsquo;s new, why you should update, how that works and what you should watch out for.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Angular 8 and the Future - NGConf 2019 Roundup</title>
      <link>https://juristr.com/blog/2019/05/Angular-8-and-the-Future-NGConf-2019-Roundup/</link>
      <pubDate>Wed, 01 May 2019 17:30:08 +0200</pubDate>
      
      <guid>https://juristr.com/blog/2019/05/Angular-8-and-the-Future-NGConf-2019-Roundup/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    I&amp;rsquo;m not at NGConf 2019 (unfortunately). But I&amp;rsquo;m following along very closely with the Angular community (and as an Angular GDE) I&amp;rsquo;m particularly excited what&amp;rsquo;s currently being announced at Salt Lake City . As such I&amp;rsquo;m summarizing here my main takeaway from the conf.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Lazy load Angular Components</title>
      <link>https://juristr.com/blog/2019/04/state-lazy-loading-components-angular/</link>
      <pubDate>Mon, 29 Apr 2019 14:00:00 +0100</pubDate>
      
      <guid>https://juristr.com/blog/2019/04/state-lazy-loading-components-angular/</guid>
      <description>Lazy loading is hot recently and for a good reason. It&amp;rsquo;s all about speed! The Chrome team at Google in specific (around Addy Osmani) tries to push out content (and new APIs) to optimize the heck out of web pages.</description>
    </item>
    
    <item>
      <title>Introduction to Angular Elements</title>
      <link>https://juristr.com/blog/2019/04/intro-to-angular-elements/</link>
      <pubDate>Sun, 28 Apr 2019 12:00:09 +0200</pubDate>
      
      <guid>https://juristr.com/blog/2019/04/intro-to-angular-elements/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    You didn&amp;rsquo;t yet get into Angular Elements? Then it&amp;rsquo;s time to give it a go! In this article we&amp;rsquo;re going to see what Angular Elements actually are, why they are useful and how to create our first Angular Element out of a plain component.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Setup your Workstation for JavaScript Development</title>
      <link>https://juristr.com/blog/2019/04/setup-for-angular-dev/</link>
      <pubDate>Fri, 26 Apr 2019 16:10:05 +0200</pubDate>
      
      <guid>https://juristr.com/blog/2019/04/setup-for-angular-dev/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    You want to learn about modern web development with JavaScript? Maybe Angular? Well, then it&amp;rsquo;s time to get you setup properly to get started. In this article we&amp;rsquo;ll go through some of the tools.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>RxJS finalize operator to execute logic on Observable termination</title>
      <link>https://juristr.com/blog/2019/04/rxjs-finalize-operator/</link>
      <pubDate>Mon, 04 Mar 2019 10:00:00 +0100</pubDate>
      
      <guid>https://juristr.com/blog/2019/04/rxjs-finalize-operator/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    In this article we&amp;rsquo;re going to have a look at the RxJS &lt;code&gt;finalize&lt;/code&gt; operator. To have a practical use case, let&amp;rsquo;s take a look at disabling/enabling a form submit button during an HTTP request.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>A step-by-step guide to integrating a third party widget with Angular</title>
      <link>https://juristr.com/blog/2019/02/ag-grid-integrating-with-angular/</link>
      <pubDate>Thu, 14 Feb 2019 21:24:36 +0100</pubDate>
      
      <guid>https://juristr.com/blog/2019/02/ag-grid-integrating-with-angular/</guid>
      <description>When working on a complex project you will inevitably face the situation when you have to use a 3rd party widget in your project. Also, most of the web projects today use frameworks.</description>
    </item>
    
    <item>
      <title>Display Server Side Validation Errors with Angular</title>
      <link>https://juristr.com/blog/2019/02/display-server-side-validation-errors-with-angular/</link>
      <pubDate>Thu, 07 Feb 2019 20:30:31 +0100</pubDate>
      
      <guid>https://juristr.com/blog/2019/02/display-server-side-validation-errors-with-angular/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    Input Validation is a big topic when it comes to forms. And even more in those large, enterprisey apps, where validation can become really crazy. Now, Angular forms of course provide different mechanisms for handling validation out of the box. However, in this article I won&amp;rsquo;t go into those details, I will rather show you a possible strategy for visualizing server side validation errors.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Explore Angular Router&#39;s  runGuardsAndResolvers</title>
      <link>https://juristr.com/blog/2019/01/Explore-Angular-Routers-runGuardsAndResolvers/</link>
      <pubDate>Thu, 31 Jan 2019 18:39:51 +0100</pubDate>
      
      <guid>https://juristr.com/blog/2019/01/Explore-Angular-Routers-runGuardsAndResolvers/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    Learn how we can use new options introduced for the &lt;code&gt;runGuardsAndResolvers&lt;/code&gt; setting for the Angular Router configuration to get a better control over when to run our resolvers and guards.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Guarantee Event Order with RxJS</title>
      <link>https://juristr.com/blog/2019/01/Guarantee-Event-Order-with-RxJS/</link>
      <pubDate>Wed, 16 Jan 2019 15:03:22 +0100</pubDate>
      
      <guid>https://juristr.com/blog/2019/01/Guarantee-Event-Order-with-RxJS/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
  When you create dynamic UIs, you have to deal with async stuff a lot. Most often they are triggered by some user interaction. Things usually get tricky when you need to guarantee certain operations are executed in order. Since they are async we might not know which one returns first. Let&#39;s see how RxJS can help a lot here.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Simple State Management with RxJS’s scan operator</title>
      <link>https://juristr.com/blog/2018/10/simple-state-management-with-scan/</link>
      <pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://juristr.com/blog/2018/10/simple-state-management-with-scan/</guid>
      <description>State management is a big topic currently in frontend development. For a reason: frontend frameworks/libraries got extremely powerful in the recent years, which led to more and more complex applications which need to be tamed.</description>
    </item>
    
    <item>
      <title>Debugging Angular Applications from the Console</title>
      <link>https://juristr.com/blog/2016/02/debugging-angular2-console/</link>
      <pubDate>Wed, 10 Feb 2016 01:00:00 +0000</pubDate>
      
      <guid>https://juristr.com/blog/2016/02/debugging-angular2-console/</guid>
      <description>There have been some quite useful articles for how to debug Angular 1.x applications from the browser&#39;s console. But how can we achieve the same in Angular?</description>
    </item>
    
    <item>
      <title>Learning Angular: Conditionally add styles to an element</title>
      <link>https://juristr.com/blog/2016/01/learning-ng2-dynamic-styles/</link>
      <pubDate>Mon, 25 Jan 2016 01:00:00 +0000</pubDate>
      
      <guid>https://juristr.com/blog/2016/01/learning-ng2-dynamic-styles/</guid>
      <description>Here we&#39;re going through a couple of ways to conditionally apply some styles to a DOM element in Angular.     (adsbygoogle = window.</description>
    </item>
    
  </channel>
</rss>